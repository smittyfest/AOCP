1. [10] The text showed how to interchange the values of variables m and n, using the replacement notation,
by setting t ← m, m ← n, n ← t. Show how the values of four variables (a, b, c, d) can be rearranged
to (b, c, d, a) by a sequence of replacements. In other words, the new value of a is to be the original
value of b, etc. Try to use the minimum number of replacements.

Solution: The naive procedure requires 8 operations, consisting of assigning the original values
to four temporary variables, followed by the four value re-assignment operations:

t ← a   # 1
u ← b   # 2
v ← c   # 3
x ← d   # 4

a ← u   # 5
b ← v   # 6
c ← x   # 7
d ← t   # 8

We can improve upon this by realizing that we only need an auxiliary variable for storing a single existing
value, resulting in a total of 5 operations:

t ← a   # 1
a ← b   # 2
b ← c   # 3
c ← d   # 4
d ← a   # 5

2. [15] Prove that m is always greater than n at the beginning of step E1, except possibly the first
time this step occurs.

Proof: Assume m and n are positive integers. In the case where the input value of m is less than the
input value of n, the remainder r of m / n will simply be m, thus in step E3 the new value of m will be
the original value of n, and the new value of n will be r, which is the original value of m.
Thus the values of m and n swap in this case. 
For each iteration forward, m / n will result in a remainder r that must be lessthan n.
Using a proof by contradiction, assume the remainder r of m / n is greater than or equal to n:
this would be impossible, because if this were the case, we could simply divide this remainder
by n again and again until we reveal a remainder that is smaller than n.
So knowing we will always be able to achieve a remainder r that is smaller than n when dividing m / n,
we can show that in step E3, the new value of m will be the original value of n, while the new value of n
will be this remainder value r,so we have m > n => n > r => m > n.
Thus m is always greater than n at the beginning of step E1.


3. [20] Change Euclid's Algorithm "Algorithm E" (for the sake of efficiency) so that all trivial
replacement operations such as m ← n are avoided. Write this new algorithm in the style of Algorithm E,
and call it Algorithm F.

Solution: we can implement Algorithm F recursively, so that there are now variable substitutions as such:

Algorithm F (Euclid's Algorithm-no variable substitutions). Given two positive integers m and n,
find their greatest common divisor, that is, the largest positive integer that evenly divides both m and n.

F1. [Is n zero?] If n = 0, the algorithm terminates; m is the answer.
F2. [Recursive call] Call the algorithm with the values n and m % n directly instead of storing
these values in separate variables.


4. [16] What is the greatest common divisor of 2166 and 6099?

Solution: Using Algorithm E (Euclid's Algorithm), we have

m = 6099, n = 2166, r = 6099 % 2166 = 1767
m = 2166, n = 1767, r = 2166 % 1767 = 399
m = 1767, n = 399, r = 1767 % 399 = 171
m = 399, n = 171, r = 399 % 171 = 57
m = 171, n = 57, r = 171 % 57 = 0

Thus, the greatest common divisor of 2166 and 6099 is 57.


5. [12] Show that the "Procedure for Reading This Set of Books" that appears after the preface
actually fails to be a genuine algorithm on at least three of our five counts!
Also mention some differences in format between it and Algorithm E.

Solution: Of our five criteria for what constitutes a genuine algorithm
(Finiteness, Definiteness, Input, Output, Effectiveness), the "Procedure for
Reading This Set of Books" fails to achieve Finiteness, Definiteness, Output,
and Effectiveness.

Finiteness - An algorithm must terminate in a finite number of steps. This procedure lacks finiteness because
there is no clear terminating state, as the reader is told to proceed back to step 3 and re-read the book after
they have finished reading and working through all of the exercises in the book. This loop iterates forever.

Definiteness - Each step of an algorithm must be precisely defined. This procedure lacks definiteness because
several steps are ambiguous. Steps with language like "Is the subject of the chapter interesting to you?",
"Are you mathematically inclined?", and "Relax" are not defined in a definite fashion.

Output - An algorithm has one or more outputs, or quantities with a specified relation to the input.
If we assume the book is the input, we would expect an algorithm to have a concrete set of output related in some
way to the input. We could imagine the output being the benefits a reader may gain from studying the book,
but this is highly subjective and open to interpretation. Therefore, this procedure does not have a clear output.

Effectiveness - Each step of an algorithm is expected to be performed in an exact fashion in a finite period
of time. Since one could expect to take an indefinite amount of time to complete their study of this book,
and also because many of the steps are ambiguous and subjective, this procedure lacks Effectiveness.


6. [20] What is T₅, the average number of times step E1 is performed when n = 5?

Solution: After the first execution of step E1 only the remainder of m after division by n is relevant.
Since the remainder will always be less than n, and since n may divide m evenly with no remainder, we only
need to check m for m = 1, m = 2, ..., m = n:

m = 1, n = 5:
E1(1) - 1 / 5 => m = 5, n = r = 1
E1(2) - 5 / 1 => r = 0, return n = 1

m = 2, n = 5:
E1(1) - 2 / 5 => m = 5, n = r = 2
E1(2) - 5 / 2 => m = 2, n = r = 1
E1(3) - 2 / 1 => r = 0, return n = 1

m = 3, n = 5:
E1(1) - 3 / 5 => m = 5, n = r = 3
E1(2) - 5 / 3 => m = 3, n = r = 2
E1(3) - 3 / 2 => m = 2, n = r = 1
E1(4) = 2 / 1 => r = 0, return n = 1

m = 4, n = 5:
E1(1) - 4 / 5 => m = 5, n = r = 4
E1(2) - 5 / 4 => m = 4, n = r = 1
E1(3) - 4 / 1 => r = 0, return n = 1

m = 5, n = 5:
E1(1) - 5 / 5 => r = 0, return n = 5 

Thus step E1 is executed 13 times, so avaraging by n = 5 we get 13 / 5 equals
step E1 getting executed an average of 2.6 times.


7. [M21] Suppose that m is known and n is allowed to range over all positive
integers; let Um be the average number of times that step E1 is executed in
Algorithm E. Show that Um is well-defined. Is Um in any way related to Tm?

Solution: I did not understand what Knuth meant by Tm here or how it might relate to Um, I even
considered the possibility that Knuth might have meant Tn instead of Tm, but since Knuth checks
are much sought after, I'm going to assume this isn't a typo. Knuth states in the back of the book
that "In all but a finite number of cases, n > m." This makes sense, as m is fixed so there is only a
finite range of integers 1..m where n < m. He goes on to state "And when n > m, the first iteration
of Algorithm E merely exchanges these numbers;" This makes sense as well, as anytime m < n the
algorithm will set m to the value of n and set n to the value of the remainder, which will be the 
original value of m. Finally he adds "so Um = Tm + 1". So What we obtain from this is that Tm seems
to stand for the average number of times step E1 is executed whenever m > n? Since anytime m < n we
simply swap the values of m and n in step E3, this will in fact only add a single extra step to
the number of times step E1 is executed, that total being Um.


8. [M25] Give an "effective" formal algorithm for computing the greatest common divisor of positive
integers m and n, by specifying θj, ϕj, aj, bj as in Eqs. (3). Let the input be represented by the
string a^mb^n, that is, m a's followed by n b's. Try to make your solution as simple as possible.
[Hint: Use Algorithm E, but instead of division in step E1, set r ← |m - n|, n ← min(m, n).]

Solution:
